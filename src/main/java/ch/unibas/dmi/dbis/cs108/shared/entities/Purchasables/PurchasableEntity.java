package ch.unibas.dmi.dbis.cs108.shared.entities.Purchasables;

import ch.unibas.dmi.dbis.cs108.shared.entities.GameEntity;
import ch.unibas.dmi.dbis.cs108.shared.entities.Purchasables.Statues.Statue;
import com.google.gson.JsonObject;

/**
 * Base class for entities that can be purchased by players.
 * Extends the GameEntity class with price information.
 */
public abstract class PurchasableEntity extends GameEntity {
    /**
     * The cost to purchase this entity.
     */
    protected int price;

    /**
     * The resource value of this entity.
     */
    protected int resourceValue;

    /**
     * Indicates whether this entity has already been activated this turn.
     */
    protected boolean activated = false;

    /**
     * Indicates whether this entity has been disabled last turn.
     * Value above 0 means it was disabled
     * Value of 0 means it was not
     */
    protected int disabled = 0;

    /**
     * Default constructor for PurchasableEntity.
     */
    public PurchasableEntity() {}

    /**
     * Constructs a new PurchasableEntity with specified values.
     *
     * @param id The unique identifier for this entity
     * @param name The name of this entity
     * @param description The description of this entity
     * @param price The purchase price of this entity
     */
    public PurchasableEntity(int id, String name, String description, int price, int resourceValue) {
        super(id, name, description);
        this.price = price;
        this.resourceValue = resourceValue;
    }

    /**
     * Returns the purchase price of this entity.
     *
     * @return The price of this entity
     */
    public int getPrice() { return price; }

    /**
     * Returns if this entity is a structure.
     */
    public boolean isStructure() { return this instanceof Structure; }

    /**
     * Returns if this entity is a statue.
     */
    public boolean isStatue() { return this instanceof Statue; }

    /**
     * Returns the resource value of this entity.
     * This value is used to determine the amount of resources generated by this entity per turn.
     * This can either be energy (for structures) or runes (for statues).
     *
     * @return The resource value of this entity
     */
    public int getResourceValue() { return resourceValue; }

    /**
     * Loads entity data from a JSON object.
     * Extends the parent method to also load price data.
     *
     * @param json The JSON object containing entity data
     */
    @Override
    protected void loadFromJson(JsonObject json) {
        super.loadFromJson(json);
        this.price = json.get("price").getAsInt();
        this.resourceValue = json.get("resourceValue").getAsInt();
    }

    /**
     * Returns whether this entity has been activated this turn
     *
     * @return true if it has, false otherwise
     */
    public boolean isActivated() {
        return activated;
    }

    /**
     * Returns if this statue is currently disabled,
     * Any value above 0 means yes
     *
     * @return true if yes, false otherwise
     */
    public boolean isDisabled() {
        return disabled > 0;
    }

    /**
     * Sets the activation of this structures to the given boolean
     *
     * @param b boolean that gives the activation of the statue
     */
    public void setActivated(boolean b) {
        this.activated = b;
    }

    /**
     * Sets the ressource value of this entity
     *
     * @param value int the resource value
     */
    public void setRessourceValue(int value) {
        this.resourceValue = value;
    }

    /**
     * Disables this statue for "turns" number of turns
     *
     * @param turns the number of turns it should be disabled
     */
    public void disable(int turns) {
        this.disabled = turns;
    }

    /**
     * Ticks one turn off of the disabled "timer"
     */
    public void disabledTurn() {
        this.disabled--;
    }
}