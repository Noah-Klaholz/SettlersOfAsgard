plugins {
    id 'java-library'
    id 'application'
    id 'org.openjfx.javafxplugin' version '0.0.13'
    // id 'com.github.ben-manes.versions' version '0.46.0'
}

group 'ch.unibas.dmi.dbis'
version '0.0.1-ALPHA'

application {
    mainClass = 'ch.unibas.dmi.dbis.cs108.example.Main'
}

javadoc {
    source = sourceSets.main.allJava

    destinationDir = file("$buildDir/docs/Documentation/javadoc")

    options.encoding = "UTF-8"
}

javafx {
    version = "19.0.2.1"
    modules = ['javafx.controls', 'javafx.fxml', 'javafx.base']
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

repositories {
    mavenCentral()
}

dependencies {
    // JUnit BOM
    testImplementation platform('org.junit:junit-bom:5.9.2')
    // JUnit Jupiter (the JUnit 5 engine)
    testImplementation 'org.junit.jupiter:junit-jupiter:5.9.1'

    // If you still need the older JUnit Vintage engine:
    // testImplementation 'org.junit.vintage:junit-vintage-engine'

    // example JavaFX library (though the plugin might already handle these)
    implementation 'org.openjfx:javafx-controls:19.0.2.1'
}

test {
    useJUnitPlatform()
    testLogging {
        showStandardStreams = true
        events "failed", "skipped", "passed", "standardOut", "standardError", "started"
    }

    // Set UTF-8 encoding for the test JVM
    systemProperty "file.encoding", "utf-8"
}

tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}

tasks.withType(Test) {
    systemProperty "file.encoding", "utf-8"
}

tasks.withType(JavaExec) {
    systemProperty "file.encoding", "utf-8"
}

jar {
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
    manifest {
        attributes 'Main-Class': application.mainClass
    }
    from {
        configurations.runtimeClasspath.collect { file ->
            file.isDirectory() ? file : zipTree(file)
        }
    }
}