plugins {
    id 'java-library'
    id 'application'
    id 'org.openjfx.javafxplugin' version '0.1.0'
    id 'jacoco'
    id 'com.github.spotbugs' version '5.0.14'
}

group 'ch.unibas.dmi.dbis'
version '0.0.1-ALPHA'

application {
    mainClass = 'ch.unibas.dmi.dbis.cs108.Main'
    applicationDefaultJvmArgs = ['--module-path', "${System.getProperty('java.home')}/lib/",
                                 '--add-modules', 'javafx.controls,javafx.fxml,javafx.base']
}

javadoc {
    source = sourceSets.main.allJava
    destinationDir = layout.buildDirectory.dir("docs/Documentation/javadoc").get().asFile
    options.encoding = "UTF-8"
}

javafx {
    version = "19.0.2.1"
    modules = ['javafx.controls', 'javafx.fxml', 'javafx.base', 'javafx.media']
}

sourceSets {
    main {
        java.srcDirs = ['src/main/java']
        resources.srcDirs = ['src/main/resources']
    }
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

repositories {
    mavenCentral()
}

dependencies {
    testImplementation platform('org.junit:junit-bom:5.9.2')
    testImplementation 'org.junit.jupiter:junit-jupiter:5.9.1'
    testImplementation 'org.mockito:mockito-core:5.5.0'
    testImplementation 'org.mockito:mockito-junit-jupiter:5.5.0'
    implementation 'com.google.code.gson:gson:2.10.1'
    implementation "org.openjfx:javafx-base:${javafx.version}"
    implementation "org.openjfx:javafx-controls:${javafx.version}"
    implementation "org.openjfx:javafx-fxml:${javafx.version}"
    implementation "org.openjfx:javafx-media:${javafx.version}"
}

jacoco {
    toolVersion = "0.8.8"
}

test {
    useJUnitPlatform()
    testLogging {
        showStandardStreams = true
        events "failed", "skipped", "passed", "standardOut", "standardError", "started"
    }
    systemProperty "file.encoding", "utf-8"
    jvmArgs = [
            '--module-path', classpath.asPath,
            '--add-modules', 'javafx.controls,javafx.fxml,javafx.base',
            '-Dtestfx.robot=glass',
            '-Dglass.platform=Monocle',
            '-Dmonocle.platform=Headless',
            '-Dprims,order=sw'
    ]
    finalizedBy jacocoTestReport
}

jacocoTestReport {
    reports {
        xml.required = true
        csv.required = true
    }
}

spotbugs {
    toolVersion = '4.8.0'
    ignoreFailures = true
    effort = 'max'
}

tasks.named('spotbugsMain') {
    reports {
        html {
            required = true
            outputLocation = file("$buildDir/reports/spotbugs/main.html")
        }
    }
}

tasks.register('docMetrics') {
    group = 'verification'
    description = 'Checks documentation coverage'
    dependsOn javadoc

    doLast {
        def totalClasses = 0
        def documentedClasses = 0

        fileTree(dir: 'src/main/java').each { file ->
            if (file.name.endsWith('java')) {
                totalClasses++
                if (file.text.contains('/**') && file.text.contains('*/')) {
                    documentedClasses++
                }
            }
        }
        def coverage = (totalClasses > 0) ? (documentedClasses / totalClasses * 100) : 0

        println "\nDocumentation Coverage:"
        println "Total Classes: $totalClasses"
        println "Documented: $documentedClasses"
        println "Coverage: ${String.format("%.2f", coverage)}%"
    }
}

tasks.register('checkCode') {
    group = 'verification'
    description = 'Runs all code quality checks'
    dependsOn test, spotbugsMain, docMetrics
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = "UTF-8"
}

tasks.withType(Test).configureEach {
    systemProperty "file.encoding", "utf-8"
}

tasks.withType(JavaExec).configureEach {
    systemProperty "file.encoding", "utf-8"
}

jar {
    archiveBaseName = 'settlersOfAsgard'
    archiveVersion = ''
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
    manifest {
        attributes 'Main-Class': application.mainClass
    }
    from {
        configurations.runtimeClasspath.collect { file -> file.isDirectory() ? file : zipTree(file) }
    }
}

tasks.register('build-cs108') {
    dependsOn jar, javadoc
    description = 'Builds the main JAR file and Javadocs'
    group = 'build'
}

tasks.register('buildWebsite') {
    dependsOn jar, javadoc
    description = 'Builds the main JAR file and Javadocs'
    group = 'build'

    doLast {
        // Create website download directory
        def websiteDir = file("${projectDir}/outreach/website/download")
        websiteDir.mkdirs()

        // Copy the JAR to the website directory
        copy {
            from "${buildDir}/libs/settlersOfAsgard.jar"
            into websiteDir
        }

        println "JAR file copied to website download directory: ${websiteDir}/settlersOfAsgard.jar"

        // Create documents directory and copy PDFs
        def docsDir = file("${projectDir}/outreach/website/documents")
        docsDir.mkdirs()

        // Copy documentation files if they exist
        copy {
            from "${projectDir}/docs/Spielbeschreibungen"
            include "*.pdf"
            into docsDir
        }
    }
}

tasks.register('runClient', JavaExec) {
    group = 'application'
    description = 'Runs the client application'
    mainClass = 'ch.unibas.dmi.dbis.cs108.client.app.ClientMainApp'
    classpath = sourceSets.main.runtimeClasspath
    systemProperty "file.encoding", "utf-8"
    jvmArgs = [
            '--module-path', classpath.asPath,
            '--add-modules', 'javafx.controls,javafx.fxml,javafx.base'
    ]
}

tasks.register('runServer', JavaExec) {
    group = 'application'
    description = 'Runs the server application'
    mainClass = 'ch.unibas.dmi.dbis.cs108.server.Main'
    classpath = sourceSets.main.runtimeClasspath
    systemProperty "file.encoding", "utf-8"
}

tasks.register('runGame', JavaExec) {
    group = 'application'
    description = 'Runs the GameApplication'
    mainClass = 'ch.unibas.dmi.dbis.cs108.client.app.GameApplication'
    classpath = sourceSets.main.runtimeClasspath
    systemProperty "file.encoding", "utf-8"
    jvmArgs = [
            '--module-path', classpath.asPath,
            '--add-modules', 'javafx.controls,javafx.fxml,javafx.base'
    ]
}

