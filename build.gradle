plugins {
    id 'java-library'
    id 'application'
    id 'org.openjfx.javafxplugin' version '0.0.13'
}

group 'ch.unibas.dmi.dbis'
version '0.0.1-ALPHA'

application {
    mainClass = 'ch.unibas.dmi.dbis.cs108.Main'
}

javadoc {
    source = sourceSets.main.allJava
    destinationDir = file("$buildDir/docs/Documentation/javadoc")
    options.encoding = "UTF-8"
}

javafx {
    version = "19.0.2.1"
    modules = ['javafx.controls', 'javafx.fxml', 'javafx.base']
}

sourceSets {
    main {
        java.srcDirs = ['src/main/java']
        resources.srcDirs = ['src/main/resources']
    }
    client {
        java {
            srcDirs = ['src/main/java']
        }
        resources {
            srcDirs = ['src/main/resources']
        }
        compileClasspath += sourceSets.main.compileClasspath
        runtimeClasspath += sourceSets.main.runtimeClasspath
    }
    server {
        java {
            srcDirs = ['src/main/java']
        }
        resources {
            srcDirs = ['src/main/resources']
        }
        compileClasspath += sourceSets.main.compileClasspath
        runtimeClasspath += sourceSets.main.runtimeClasspath
    }
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

repositories {
    mavenCentral()
}

dependencies {
    testImplementation platform('org.junit:junit-bom:5.9.2')
    testImplementation 'org.junit.jupiter:junit-jupiter:5.9.1'

    testImplementation 'org.mockito:mockito-core:5.5.0'
    testImplementation 'org.mockito:mockito-junit-jupiter:5.5.0'
}

test {
    useJUnitPlatform()
    testLogging {
        showStandardStreams = true
        events "failed", "skipped", "passed", "standardOut", "standardError", "started"
    }
    systemProperty "file.encoding", "utf-8"
}

tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}

tasks.withType(Test) {
    systemProperty "file.encoding", "utf-8"
}

tasks.withType(JavaExec) {
    systemProperty "file.encoding", "utf-8"
}

jar {
    archiveBaseName = 'settlersOfAsgard'
    archiveVersion = ''
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
    manifest {
        attributes 'Main-Class': application.mainClass
    }
    from {
        configurations.runtimeClasspath.collect { file ->
            file.isDirectory() ? file : zipTree(file)
        }
    }
}

task clientJar(type: Jar) {
    archiveBaseName = 'settlersOfAsgard'
    archiveVersion = ''
    archiveClassifier = 'client'
    from sourceSets.client.output
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
    manifest {
        attributes 'Main-Class': 'ch.unibas.dmi.dbis.cs108.client.app.Main'
    }
    from {
        configurations.runtimeClasspath.collect { file ->
            file.isDirectory() ? file : zipTree(file)
        }
    }
}

task serverJar(type: Jar) {
    archiveBaseName = 'settlersOfAsgard'
    archiveVersion = ''
    archiveClassifier = 'server'
    from sourceSets.server.output
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
    manifest {
        attributes 'Main-Class': 'ch.unibas.dmi.dbis.cs108.server.Main'
    }
    from {
        configurations.runtimeClasspath.collect { file ->
            file.isDirectory() ? file : zipTree(file)
        }
    }
}

build.dependsOn clientJar, serverJar