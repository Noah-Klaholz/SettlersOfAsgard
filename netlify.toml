[build]
publish = "outreach/website"
command = """
    # Force Java 17 installation using sdk (Software Development Kit Manager) which is available on Netlify
    echo "Installing Java 17..."
    . /opt/buildhome/.sdkman/bin/sdkman-init.sh
    sdk install java 17.0.7-tem
    sdk use java 17.0.7-tem
    java -version
    
    # Create necessary directories
    mkdir -p outreach/website/documents outreach/website/download
    
    # Copy documentation files - do this first in case the build fails
    cp -f docs/Spielbeschreibungen/*.pdf outreach/website/documents/ || echo "Warning: PDF files not copied"
    
    # Use a custom init script to bypass JavaFX plugin issues
    echo "Creating init script to bypass JavaFX plugin issues..."
    cat > init.gradle << EOF
    allprojects {
        buildscript {
            repositories {
                mavenCentral()
            }
        }
    }
    EOF
    
    # Build the JAR with our custom init script
    echo "Running Gradle build..."
    ./gradlew jar -I init.gradle --no-daemon --stacktrace
    
    # Copy the JAR if it was built successfully
    if [ -f "build/libs/settlersOfAsgard.jar" ]; then
        echo "JAR built successfully, copying to website/download directory"
        cp -f build/libs/settlersOfAsgard.jar outreach/website/download/SettlersOfAsgard.jar
    else
        echo "JAR build failed, creating fallback placeholder"
        echo "This is a placeholder JAR. Please visit our GitHub repository for the full game: https://github.com/CS108-Group-3/SettlersOfAsgard/releases" > outreach/website/download/SettlersOfAsgard.jar
    fi
    
    # Verify website files
    echo "Website directory contents:"
    ls -la outreach/website/
    echo "Download directory contents:"
    ls -la outreach/website/download/
    echo "Documents directory contents:"
    ls -la outreach/website/documents/
"""

[build.environment]
  JAVA_HOME = "~/.sdkman/candidates/java/17.0.7-tem"
  PATH = "${PATH}:${HOME}/.sdkman/candidates/java/current/bin"

# This redirect ensures any path will serve index.html
[[redirects]]
  from = "/*"
  to = "/index.html"
  status = 200

[[headers]]
  for = "/images/*"
  [headers.values]
    Cache-Control = "public, max-age=604800"

[[headers]]
  for = "/download/*"
  [headers.values]
    Cache-Control = "public, max-age=86400"
